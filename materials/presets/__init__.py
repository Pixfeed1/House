# ##### BEGIN GPL LICENSE BLOCK #####
#
#  House - Materials Presets Module
#  Copyright (C) 2025 mvaertan
#
#  Gestionnaire centralis√© des presets de mat√©riaux proc√©duraux
#  Architecture modulaire : 1 fichier = 1 preset
#
# ##### END GPL LICENSE BLOCK #####

"""Module de gestion des presets de mat√©riaux proc√©duraux

Architecture:
- Chaque preset est dans un fichier s√©par√© (ex: brick_red_ultimate.py)
- Fonction principale : get_procedural_material(preset_id)
- Gestion automatique du cache (√©vite les doublons)
"""

import bpy
from . import brick_red_ultimate

# Mapping preset_id -> fonction de cr√©ation
PRESET_FUNCTIONS = {
    'BRICK_RED': brick_red_ultimate.create_brick_red_ultimate,
    # Presets par d√©faut pour les autres couleurs (temporaire)
    'BRICK_RED_DARK': brick_red_ultimate.create_brick_red_ultimate,  # Temporaire
    'BRICK_ORANGE': brick_red_ultimate.create_brick_red_ultimate,     # Temporaire
    'BRICK_BROWN': brick_red_ultimate.create_brick_red_ultimate,      # Temporaire
    'BRICK_YELLOW': brick_red_ultimate.create_brick_red_ultimate,     # Temporaire
    'BRICK_GREY': brick_red_ultimate.create_brick_red_ultimate,       # Temporaire
}


def get_procedural_material(preset_id):
    """R√©cup√®re ou cr√©e un mat√©riau proc√©dural selon le preset_id
    
    G√®re automatiquement le cache : si le mat√©riau existe d√©j√† dans bpy.data.materials,
    il est r√©utilis√©. Sinon, il est cr√©√©.
    
    Args:
        preset_id (str): ID du preset (ex: 'BRICK_RED', 'BRICK_ORANGE')
        
    Returns:
        bpy.types.Material: Le mat√©riau cr√©√© ou r√©cup√©r√© du cache
        
    Raises:
        ValueError: Si le preset_id n'existe pas
    """
    
    if preset_id not in PRESET_FUNCTIONS:
        print(f"[House] ‚ö†Ô∏è Preset '{preset_id}' non trouv√© dans PRESET_FUNCTIONS")
        raise ValueError(f"Preset inconnu : {preset_id}")
    
    # Nom du mat√©riau dans Blender
    material_name = f"Brick_{preset_id}_Ultimate"
    
    # V√©rifier si le mat√©riau existe d√©j√†
    if material_name in bpy.data.materials:
        print(f"[House] ‚ôªÔ∏è Mat√©riau {material_name} d√©j√† existant (cache)")
        return bpy.data.materials[material_name]
    
    # Cr√©er le mat√©riau
    print(f"[House] üé® Cr√©ation du mat√©riau {preset_id}...")
    create_func = PRESET_FUNCTIONS[preset_id]
    material = create_func()
    
    # Renommer pour le cache
    material.name = material_name
    
    print(f"[House] ‚úÖ Mat√©riau {material_name} cr√©√© avec succ√®s")
    return material


def list_available_presets():
    """Liste tous les presets proc√©duraux disponibles
    
    Returns:
        list: Liste des IDs de presets disponibles
    """
    return list(PRESET_FUNCTIONS.keys())


def clear_material_cache():
    """Supprime tous les mat√©riaux proc√©duraux du cache
    
    Utile pour forcer la r√©g√©n√©ration des mat√©riaux.
    """
    count = 0
    for preset_id in PRESET_FUNCTIONS.keys():
        material_name = f"Brick_{preset_id}_Ultimate"
        if material_name in bpy.data.materials:
            bpy.data.materials.remove(bpy.data.materials[material_name])
            count += 1
    
    print(f"[House] üóëÔ∏è {count} mat√©riau(x) supprim√©(s) du cache")


# Pas de classes √† enregistrer
classes = []

def register():
    """Enregistrement du module presets"""
    print(f"[House] Module Presets charg√© - {len(PRESET_FUNCTIONS)} preset(s) disponible(s)")
    for preset_id in PRESET_FUNCTIONS.keys():
        print(f"[House]   - {preset_id}")


def unregister():
    """D√©senregistrement du module presets"""
    pass